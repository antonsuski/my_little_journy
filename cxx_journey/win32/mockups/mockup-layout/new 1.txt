/** @includes  --------------------------------------------------------------**/
#include <windowsx.h>

#include "window.h"
#include "../../style.h"
#include "../../../main.h"
#include "../../../functional/utils.h"
#include "messages.h"

#include <math.h>

#define MAX_CAPTION_LEN 256



/** @static_data ------------------------------------------------------------**/
static WNDPROC orig_password_edit_wndproc = NULL;
static LRESULT CALLBACK wndproc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
static LRESULT CALLBACK close_button_wndproc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);

static int title_h = 35;
static layout_mesh_t* window_mesh = NULL;

/** @functions  -------------------------------------------------------------**/
BOOL CALLBACK EnumChildProc(HWND hwnd, LPARAM lparam);

HWND create_window(HWND parent_hwnd, int pos_x, int pos_y, int size_x, int size_y, const wchar_t* caption) {
    static int is_class_inited = 0;
    static WNDCLASSW wc_messagebox = { 0 };
    static WNDCLASSW wc_messagebox_close_button = { 0 };


    if (is_class_inited == 0)
    {
        wc_messagebox.lpszClassName = L"wc_window";
        wc_messagebox.lpfnWndProc = wndproc;
        wc_messagebox.hInstance = get_instance_handle();
        wc_messagebox.hbrBackground = get_style()->hMsgBoxBkgColorBrush;
        wc_messagebox.hCursor = LoadCursor(NULL, IDC_ARROW);
        wc_messagebox.hCursor = NULL;
        RegisterClassW(&wc_messagebox);

        wc_messagebox_close_button.lpszClassName = L"wc_close_w_button";
        wc_messagebox_close_button.lpfnWndProc = close_button_wndproc;
        wc_messagebox_close_button.hInstance = get_instance_handle();
        wc_messagebox_close_button.hbrBackground = get_style()->hErrorBkgRedBrush;
        // wc_messagebox_close_button.hCursor = LoadCursor(NULL, IDC_ARROW);
        RegisterClassW(&wc_messagebox_close_button);

        is_class_inited = 1;
    }

    HWND hwnd = CreateWindowExW(
        WS_EX_TRANSPARENT, wc_messagebox.lpszClassName, caption,
        WS_VISIBLE | WS_POPUP | WS_BORDER,
        pos_x, pos_y,
        size_x, size_y,
        NULL, NULL, get_instance_handle(), NULL);
    //if (proc != NULL)
    //    orig_wndproc = (WNDPROC)SetWindowLongPtr(hwnd, GWLP_WNDPROC, (LONG_PTR)proc);
    return hwnd;
}

void add_mesh(layout_mesh_t* mesh)
{
    if (mesh != NULL)
    {
        window_mesh = mesh;
    }
    return;
}

    static HWND mousehovered_window_handle = NULL;
    static collision_edge_t window_edge_collision = E_NO_COLLIDE;
    static POINT prev_mouse_pos = {0, 0};
    static BOOL left_mouse_button_clicked = FALSE;

#define TRACK_MOUSE_EVENT \
do {\
TRACKMOUSEEVENT __tme = { sizeof(__tme) };\
__tme.dwFlags = TME_LEAVE;\
__tme.hwndTrack = hwnd;\
TrackMouseEvent(&__tme); } while (0)
static LRESULT CALLBACK wndproc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    WCHAR buffer[2048] = {0};
    switch (msg)
    {
        // case WM_NCHITTEST:
        // {
        //     POINT current_mouse_pos;
        //     RECT rect;

        //     GetCursorPos(&current_mouse_pos);
        //     GetWindowRect(hwnd, &rect);

        //     window_edge_collision = ponit_to_rect_collision(&current_mouse_pos, &rect);
        //     if (window_edge_collision == E_TOP)
        //     {
        //         return HTTOP;
        //     }
        //     else if (window_edge_collision == E_BOTTOM)
        //     {
        //         return HTBOTTOM;
        //     }
        //     else if (window_edge_collision == E_LEFT)
        //     {
        //         return HTLEFT;
        //     }
        //     else if (window_edge_collision == E_RIGHT)
        //     {
        //         return HTRIGHT;
        //     }
        //     else if (window_edge_collision == (E_LEFT | E_TOP))
        //     {
        //         return HTTOPLEFT;
        //     }
        //     else if (window_edge_collision == (E_LEFT | E_BOTTOM))
        //     {
        //         return HTBOTTOMLEFT;
        //     }
        //     else if (window_edge_collision == (E_RIGHT | E_TOP))
        //     {
        //         return HTTOPRIGHT;
        //     }
        //     else if (window_edge_collision == (E_RIGHT | E_BOTTOM))
        //     {
        //         return HTBOTTOMRIGHT;
        //     }
        //     else
        //     {
        //         SetCursor(LoadCursor(NULL, IDC_ARROW));
        //     }
        // } break;
        // case WM_SIZING:
        // {
        //     if (window_mesh != NULL)
        //     {
        //         RECT rect;
        //         GetWindowRect(hwnd, &rect);
        //         window_mesh->size.x = rect.right - rect.left;
        //         window_mesh->size.y = rect.bottom - rect.top - 35;
        //         calculate_layout(window_mesh);
        //         EnumChildWindows(hwnd, EnumChildProc, lParam);
        //     }
        //     RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
        //     return 0;
        // } break;
        case WM_LBUTTONDOWN:
        {
            left_mouse_button_clicked = TRUE;
            POINT pt = { 0 };
            pt.y = GET_Y_LPARAM(lParam);
            if (pt.y > get_custom_window_style()->header_height)
                break;
            LockWindowUpdate(hwnd);
            SendMessageW(hwnd, WM_SYSCOMMAND, SC_MOVE | HTCAPTION, 0);
            InvalidateRect(hwnd, NULL, TRUE);
            // return 0;
        } break;
        case WM_MOUSEMOVE:
        {
            POINT current_mouse_pos;
            RECT rect;
            TRACK_MOUSE_EVENT;
            if (mousehovered_window_handle != hwnd)
            {
                mousehovered_window_handle = hwnd;
                RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
            }
        } break;
        case WM_LBUTTONUP:
        {
            left_mouse_button_clicked = FALSE;
            return 0;
        } break;
        case WM_MOUSELEAVE:
        {
            mousehovered_window_handle = NULL;
            left_mouse_button_clicked = FALSE;
            RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
            return 0;
        }break;
        case WM_CREATE:
        {
            RECT r;
            GetWindowRect(hwnd, &r);
            HWND  h = CreateWindowExW(0, L"wc_close_w_button", L"", WS_CHILD | WS_VISIBLE, r.right - r.left - 35, 0, 35, 35, hwnd, 0, get_instance_handle(), NULL);
            return 0;
        }break;
        case WM_CTLCOLORDLG:
        case WM_CTLCOLORMSGBOX:
        case WM_CTLCOLORSTATIC:
        case WM_ERASEBKGND:
        case WM_CTLCOLORBTN:
        {
            SetTextColor((HDC)wParam, RGB(0x00, 0x00, 0x00));
            SetBkMode((HDC)wParam, TRANSPARENT);
            SelectObject((HDC)wParam, get_custom_window_style()->font);
            return (LRESULT)get_custom_window_style()->body_brush;
        } break;
        case WM_DRAWITEM:
        {
            return 0;
        }
        case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            /* Background */
            FillRect(hdc, &ps.rcPaint, get_custom_window_style()->body_brush);

            /* Header */
            ps.rcPaint.bottom = get_custom_window_style()->header_height;
            FillRect(hdc, &ps.rcPaint, get_custom_window_style()->header_brush);

            /* Caption */
            SetBkMode(hdc, TRANSPARENT);
            SelectObject(hdc, get_custom_window_style()->font);
            wchar_t buf[MAX_CAPTION_LEN];
            GetWindowTextW(hwnd, buf, MAX_CAPTION_LEN);

            RECT r;
            GetWindowRect(hwnd, &r);
            ps.rcPaint.left = 0;
            ps.rcPaint.right = r.right - r.left;

            DrawTextW(hdc, buf, -1, &ps.rcPaint, DT_WORDBREAK | DT_VCENTER | DT_SINGLELINE | DT_CENTER);

            EndPaint(hwnd, &ps);
            return 0;
        }break;
        case WM_DESTROY:
        {
            PostQuitMessage(0);
            return 0;
        } break;
    }
    return DefWindowProc(hwnd, msg, wParam, lParam);
}


#define TRACK_MOUSE_EVENT \
do {\
TRACKMOUSEEVENT __tme = { sizeof(__tme) };\
__tme.dwFlags = TME_LEAVE;\
__tme.hwndTrack = hwnd;\
TrackMouseEvent(&__tme); } while (0)
static LRESULT CALLBACK close_button_wndproc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    static int is_mousehovered = 0;
    static int is_pressed = 0;
    static collision_edge_t window_edge_collision = E_NO_COLLIDE;

    POINT current_mouse_pos = {-1, -1};
    RECT rect;

    switch (msg)
    {
    case WM_MOUSEMOVE:
    {
        TRACK_MOUSE_EVENT;
        if (0 == is_mousehovered)
        {
            is_mousehovered = 1;
            //if (wParam & MK_LBUTTON)
            RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
        }
        GetCursorPos(&current_mouse_pos);
        GetWindowRect(hwnd, &rect);
        window_edge_collision = ponit_to_rect_collision(&current_mouse_pos, &rect);
        if(window_edge_collision == E_TOP)
        {
            SetCursor(LoadCursor(NULL, IDC_SIZENS));
        }
        else if(window_edge_collision == E_RIGHT)
        {
            SetCursor(LoadCursor(NULL, IDC_SIZEWE));
        }
        else
        {
            SetCursor(LoadCursor(NULL, IDC_ARROW));
        }
        //    is_pressed = 1;
        // RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
        return 0;
    } 
    case WM_MOUSELEAVE:
    {
        is_mousehovered = 0;
        is_pressed = 0;
        RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
        return 0;
    }
    case WM_LBUTTONDBLCLK:
    case WM_LBUTTONDOWN:
    {
        is_pressed = 1;
        RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
        return 0;
    }
    case WM_LBUTTONUP:
    {
        if (is_pressed == 1 && is_mousehovered == 1)
        {
            DestroyWindow(GetParent(hwnd));
            return 0;
        }
        is_pressed = 0;
        //RedrawWindow(hwnd, NULL, NULL, RDW_INVALIDATE);
        return 0;
    }
    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);

        HBRUSH background_brush = get_custom_window_style()->header_brush;
        HBITMAP icon_handle = get_style()->hCloseDialog;
        if (is_pressed )
        {
            background_brush = get_style()->hErrorBkgRedBrush;
            icon_handle = get_style()->hCloseDialogPressed;
        }
        else if (is_mousehovered)
        {
            background_brush = get_style()->hRedLineBrush;
            icon_handle = get_style()->hCloseDialogHovered;
        }

        /* Draw background */
        FillRect(hdc, &ps.rcPaint, background_brush);
        /* Draw icon */
        HDC hImg = CreateCompatibleDC(hdc);
        SelectObject(hImg, icon_handle);
        BitBlt(hdc, 0, 0, title_h, title_h, hImg, -(title_h - 10) / 2, -(title_h - 10) / 2, SRCCOPY);
        DeleteDC(hImg);

        EndPaint(hwnd, &ps);
        return 0;
    } break;
    case WM_SIZING:
    {
        RECT rect;
        GetWindowRect(GetParent(hwnd), &rect);
        SetWindowPos(hwnd, NULL, rect.right - rect.left - 35, 0, 35, 35, SWP_NOSIZE);
        return 0;
    }
    case WM_DESTROY:
    {
        is_mousehovered = 0;
        is_pressed = 0;
    } break;
    }
    return DefWindowProc(hwnd, msg, wParam, lParam);
}

BOOL CALLBACK EnumChildProc(HWND hwnd, LPARAM lparam)
{
    SendMessage(hwnd, WM_SIZE, 0, lparam);
    return TRUE;
}